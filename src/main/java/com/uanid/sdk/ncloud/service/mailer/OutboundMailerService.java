/*
 * api
 * Cloud Outbound Mailer API<br/>https://mail.test-apigw.ntruss.com/api/v1
 *
 * OpenAPI spec version: 2019-06-20T02:51:35Z
 *
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.uanid.sdk.ncloud.service.mailer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.nbp.ncp.nes.ApiClient;
import com.nbp.ncp.nes.ApiRequest;
import com.nbp.ncp.nes.ApiResponse;
import com.nbp.ncp.nes.exception.ApiException;
import com.nbp.ncp.nes.exception.SdkException;
import com.uanid.sdk.ncloud.service.mailer.model.AddressBookDeleteAddressRequest;
import com.uanid.sdk.ncloud.service.mailer.model.AddressBookDeleteRelationRequest;
import com.uanid.sdk.ncloud.service.mailer.model.AddressBookGenerateRequest;
import com.uanid.sdk.ncloud.service.mailer.model.AddressBookInitResponse;
import com.uanid.sdk.ncloud.service.mailer.model.AddressBookResponse;
import com.uanid.sdk.ncloud.service.mailer.model.EmailListResponse;
import com.uanid.sdk.ncloud.service.mailer.model.EmailRequestStatusResponse;
import com.uanid.sdk.ncloud.service.mailer.model.EmailResponse;
import com.uanid.sdk.ncloud.service.mailer.model.EmailSendListResponse;
import com.uanid.sdk.ncloud.service.mailer.model.EmailSendRequest;
import com.uanid.sdk.ncloud.service.mailer.model.EmailSendResponse;
import java.io.File;
import com.uanid.sdk.ncloud.service.mailer.model.FileUploadResponse;
import com.uanid.sdk.ncloud.service.mailer.model.UnsubscribeListResponse;

public class OutboundMailerService {
	private final ApiClient apiClient;
	private final String domain = "https://mail.apigw.ntruss.com";
	private final String basePath = "/api/v1";;

	public OutboundMailerService(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	/**
	 *
	 * 이메일 주소 삭제 (삭제 대상 이메일 주소가 포함된 그룹의 연관정보도 제거된다)
	 * @param requestBody 수신자 주소 삭제 요청 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookResponse> addressBookAddressDelete(AddressBookDeleteAddressRequest requestBody, String X_NCP_LANG) throws ApiException, SdkException {

		// path
		String path = "/address-book/address";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, requestBody, false, false);
		return apiClient.call(apiRequest, AddressBookResponse.class);
	}

	/**
	 *
	 * 이메일 주소 삭제 (삭제 대상 이메일 주소가 포함된 그룹의 연관정보도 제거된다)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 *	requestBody 수신자 주소 삭제 요청 (required)
	 * @return byte[]
	 *	AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookAddressDelete(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/address-book/address";

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신자 주소/그룹 초기화 (모든 이메일 주소 및 수신자 그룹 삭제)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookInitResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookInitResponse> addressBookDelete(String X_NCP_LANG) throws ApiException, SdkException {

		// path
		String path = "/address-book";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, AddressBookInitResponse.class);
	}

	/**
	 *
	 * 수신자 주소/그룹 초기화 (모든 이메일 주소 및 수신자 그룹 삭제)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	AddressBookInitResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookDelete(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/address-book";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신자 주소/그룹 조회
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookResponse> addressBookGet(String X_NCP_LANG) throws ApiException, SdkException {

		// path
		String path = "/address-book";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, AddressBookResponse.class);
	}

	/**
	 *
	 * 수신자 주소/그룹 조회
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/address-book";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신자 주소/그룹 일괄로 입력받아 주소록 생성
	 * @param requestBody 주소록 생성 요청 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookResponse> addressBookPost(AddressBookGenerateRequest requestBody, String X_NCP_LANG) throws ApiException, SdkException {

		// path
		String path = "/address-book";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, domain, basePath, queryParams, formParams, httpHeaders, requestBody, false, false);
		return apiClient.call(apiRequest, AddressBookResponse.class);
	}

	/**
	 *
	 * 수신자 주소/그룹 일괄로 입력받아 주소록 생성
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 *	requestBody 주소록 생성 요청 (required)
	 * @return byte[]
	 *	AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/address-book";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신자 그룹에서 이메일 주소 연관 정보 삭제 (현재 그룹에서만 삭제된다)
	 * @param requestBody 수신자 그룹에서 이메일 주소 삭제 요청 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookResponse> addressBookRecipientGroupsAddressDelete(AddressBookDeleteRelationRequest requestBody, String X_NCP_LANG) throws ApiException, SdkException {

		// path
		String path = "/address-book/recipient-groups/address";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, requestBody, false, false);
		return apiClient.call(apiRequest, AddressBookResponse.class);
	}

	/**
	 *
	 * 수신자 그룹에서 이메일 주소 연관 정보 삭제 (현재 그룹에서만 삭제된다)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 *	requestBody 수신자 그룹에서 이메일 주소 삭제 요청 (required)
	 * @return byte[]
	 *	AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookRecipientGroupsAddressDelete(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/address-book/recipient-groups/address";

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신자 그룹에서 모든 이메일 주소 연관 정보 삭제 (비우기)
	 * @param groupName 수신자 그룸명 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookResponse> addressBookRecipientGroupsAddressEmptyDelete(String groupName, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'groupName' is set
		if (groupName == null) {
			throw new SdkException("Missing the required parameter 'groupName' when calling addressBookRecipientGroupsAddressEmptyDelete");
		}

		// path
		String path = "/address-book/recipient-groups/address/empty";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();
		if (groupName != null) {
			queryParams.put("groupName", groupName);
		}

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, AddressBookResponse.class);
	}

	/**
	 *
	 * 수신자 그룹에서 모든 이메일 주소 연관 정보 삭제 (비우기)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 *	groupName 수신자 그룸명 (required)
	 * @param body
	 * @return byte[]
	 *	AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookRecipientGroupsAddressEmptyDelete(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'groupName' is set
		if (queryParams.get("groupName") == null) {
			throw new SdkException("Missing the required parameter 'queryParams.groupName' when calling addressBookRecipientGroupsAddressEmptyDelete");
		}

		// path
		String path = "/address-book/recipient-groups/address/empty";

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신자 그룹 삭제 (그룹에 이메일 주소가 포함된 경우 연관정보만 제거된다)
	 * @param groupName 수신자 그룸명 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<AddressBookResponse> addressBookRecipientGroupsDelete(String groupName, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'groupName' is set
		if (groupName == null) {
			throw new SdkException("Missing the required parameter 'groupName' when calling addressBookRecipientGroupsDelete");
		}

		// path
		String path = "/address-book/recipient-groups";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();
		if (groupName != null) {
			queryParams.put("groupName", groupName);
		}

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, AddressBookResponse.class);
	}

	/**
	 *
	 * 수신자 그룹 삭제 (그룹에 이메일 주소가 포함된 경우 연관정보만 제거된다)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 *	groupName 수신자 그룸명 (required)
	 * @param body
	 * @return byte[]
	 *	AddressBookResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> addressBookRecipientGroupsDelete(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'groupName' is set
		if (queryParams.get("groupName") == null) {
			throw new SdkException("Missing the required parameter 'queryParams.groupName' when calling addressBookRecipientGroupsDelete");
		}

		// path
		String path = "/address-book/recipient-groups";

		// accept
		final String[] accepts = {

		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {

		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 임시파일 업로드
	 * @param fileList 파일 업로드 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return FileUploadResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FileUploadResponse> filesPost(File fileList, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'fileList' is set
		if (fileList == null) {
			throw new SdkException("Missing the required parameter 'fileList' when calling filesPost");
		}

		// path
		String path = "/files";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();
		if (fileList != null) {
			formParams.put("fileList", fileList);
		}

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"multipart/form-data"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, FileUploadResponse.class);
	}

	/**
	 *
	 * 임시파일 업로드
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	FileUploadResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> filesPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'fileList' is set
		if (formParams.get("fileList") == null) {
			throw new SdkException("Missing the required parameter 'fileList' when calling filesPost");
		}

		// path
		String path = "/files";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"multipart/form-data"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 저장된 파일 삭제
	 * @param tempRequestId tempRequestId (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return FileUploadResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FileUploadResponse> filesTempRequestIdDelete(String tempRequestId, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'tempRequestId' is set
		if (tempRequestId == null) {
			throw new SdkException("Missing the required parameter 'tempRequestId' when calling filesTempRequestIdDelete");
		}

		// path
		String path = "/files/{tempRequestId}"
			.replaceAll("\\{" + "tempRequestId" + "\\}", tempRequestId);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, FileUploadResponse.class);
	}

	/**
	 *
	 * 저장된 파일 삭제
	 * @param tempRequestId tempRequestId (required)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	FileUploadResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> filesTempRequestIdDelete(String tempRequestId, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'tempRequestId' is set
		if (tempRequestId == null) {
			throw new SdkException("Missing the required parameter 'tempRequestId' when calling filesTempRequestIdDelete");
		}

		// path
		String path = "/files/{tempRequestId}"
			.replaceAll("\\{" + "tempRequestId" + "\\}", tempRequestId);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("DELETE", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 저장된 파일 조회
	 * @param tempRequestId tempRequestId (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return FileUploadResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<FileUploadResponse> filesTempRequestIdGet(String tempRequestId, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'tempRequestId' is set
		if (tempRequestId == null) {
			throw new SdkException("Missing the required parameter 'tempRequestId' when calling filesTempRequestIdGet");
		}

		// path
		String path = "/files/{tempRequestId}"
			.replaceAll("\\{" + "tempRequestId" + "\\}", tempRequestId);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, FileUploadResponse.class);
	}

	/**
	 *
	 * 저장된 파일 조회
	 * @param tempRequestId tempRequestId (required)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	FileUploadResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> filesTempRequestIdGet(String tempRequestId, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'tempRequestId' is set
		if (tempRequestId == null) {
			throw new SdkException("Missing the required parameter 'tempRequestId' when calling filesTempRequestIdGet");
		}

		// path
		String path = "/files/{tempRequestId}"
			.replaceAll("\\{" + "tempRequestId" + "\\}", tempRequestId);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * Email 상세 조회
	 * @param mailId mailId (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return EmailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<EmailResponse> mailsMailIdGet(String mailId, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'mailId' is set
		if (mailId == null) {
			throw new SdkException("Missing the required parameter 'mailId' when calling mailsMailIdGet");
		}

		// path
		String path = "/mails/{mailId}"
			.replaceAll("\\{" + "mailId" + "\\}", mailId);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, EmailResponse.class);
	}

	/**
	 *
	 * Email 상세 조회
	 * @param mailId mailId (required)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	EmailResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> mailsMailIdGet(String mailId, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'mailId' is set
		if (mailId == null) {
			throw new SdkException("Missing the required parameter 'mailId' when calling mailsMailIdGet");
		}

		// path
		String path = "/mails/{mailId}"
			.replaceAll("\\{" + "mailId" + "\\}", mailId);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * Email 발송 요청
	 * @param requestBody 메일발송 데이터 (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return EmailSendResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<EmailSendResponse> mailsPost(EmailSendRequest requestBody, String X_NCP_LANG) throws ApiException, SdkException {

		// path
		String path = "/mails";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, domain, basePath, queryParams, formParams, httpHeaders, requestBody, false, false);
		return apiClient.call(apiRequest, EmailSendResponse.class);
	}

	/**
	 *
	 * Email 발송 요청
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 *	requestBody 메일발송 데이터 (required)
	 * @return byte[]
	 *	EmailSendResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> mailsPost(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/mails";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("POST", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * Email 발송요청 목록 조회
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param dispatchType Email 발송요청 도구 (CONSOLE : NCP Console 화면을 통한 요청, API : API 호출을 통한 요청) (optional)
	 * @param endDateTime 다음과 같은 형태의 요청 종료 일시 (&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), endUtc 값이 우선한다. (optional)
	 * @param endUtc 요청 종료 일시 ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  endDateTime 값보다 이 값이 우선 적용된다. (optional)
	 * @param mailId Email ID (각 메일 한 건을 구분하는 ID) (optional)
	 * @param page 결과를 받고 싶은 페이지 index (0..N) (default:0) (optional)
	 * @param recipientAddress 수신자 Email 주소 (optional)
	 * @param senderAddress 발송자 Email 주소 (optional)
	 * @param sendStatus Email 발송 상태 (P: 발송준비중, R: 발송준비, I: 발송중, S: 발송성공, F: 발송실패, U: 수신거부, C:발송취소, PF: 일부실패) (optional)
	 * @param size 한페이지에 당 레코드 개수 (default:10) (optional)
	 * @param sort 정렬기준 필드 (형식 : property(,asc|desc)) : 기본정렬 방향은 오름차순(asc)이며, 복수의 필드를 정렬기준으로 사용할 수 있다. 정렬가능한 필드는 다음과 같다. (createUtc : 생성일시, recipientCount : 수신자 수, reservationUtc : 예약일시, sendUtc : 발송완료일시, statusCode : 발송상태)  (optional)
	 * @param startDateTime 다음과 같은 형태의 요청 시작 일시 (&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), startUtc 값이 우선한다. (optional)
	 * @param startUtc 요청 시작 일시 ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  startDateTime 값보다 이 값이 우선 적용된다. (optional)
	 * @param templateSid 템플릿 ID (optional)
	 * @param title 메일 제목 (optional)
	 * @return EmailSendListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<EmailSendListResponse> mailsRequestsGet(String X_NCP_LANG, String dispatchType, String endDateTime, Long endUtc, String mailId, Integer page, String recipientAddress, String senderAddress, List<String> sendStatus, Integer size, String sort, String startDateTime, Long startUtc, Integer templateSid, String title) throws ApiException, SdkException {

		// path
		String path = "/mails/requests";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();
		if (dispatchType != null) {
			queryParams.put("dispatchType", dispatchType);
		}
		if (endDateTime != null) {
			queryParams.put("endDateTime", endDateTime);
		}
		if (endUtc != null) {
			queryParams.put("endUtc", endUtc);
		}
		if (mailId != null) {
			queryParams.put("mailId", mailId);
		}
		if (page != null) {
			queryParams.put("page", page);
		}
		if (recipientAddress != null) {
			queryParams.put("recipientAddress", recipientAddress);
		}
		if (senderAddress != null) {
			queryParams.put("senderAddress", senderAddress);
		}
		if (sendStatus != null) {
			queryParams.put("sendStatus", sendStatus);
		}
		if (size != null) {
			queryParams.put("size", size);
		}
		if (sort != null) {
			queryParams.put("sort", sort);
		}
		if (startDateTime != null) {
			queryParams.put("startDateTime", startDateTime);
		}
		if (startUtc != null) {
			queryParams.put("startUtc", startUtc);
		}
		if (templateSid != null) {
			queryParams.put("templateSid", templateSid);
		}
		if (title != null) {
			queryParams.put("title", title);
		}

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, EmailSendListResponse.class);
	}

	/**
	 *
	 * Email 발송요청 목록 조회
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 *	dispatchType Email 발송요청 도구 (CONSOLE : NCP Console 화면을 통한 요청, API : API 호출을 통한 요청) (optional)
	 *	endDateTime 다음과 같은 형태의 요청 종료 일시 (&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), endUtc 값이 우선한다. (optional)
	 *	endUtc 요청 종료 일시 ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  endDateTime 값보다 이 값이 우선 적용된다. (optional)
	 *	mailId Email ID (각 메일 한 건을 구분하는 ID) (optional)
	 *	page 결과를 받고 싶은 페이지 index (0..N) (default:0) (optional)
	 *	recipientAddress 수신자 Email 주소 (optional)
	 *	senderAddress 발송자 Email 주소 (optional)
	 *	sendStatus Email 발송 상태 (P: 발송준비중, R: 발송준비, I: 발송중, S: 발송성공, F: 발송실패, U: 수신거부, C:발송취소, PF: 일부실패) (optional)
	 *	size 한페이지에 당 레코드 개수 (default:10) (optional)
	 *	sort 정렬기준 필드 (형식 : property(,asc|desc)) : 기본정렬 방향은 오름차순(asc)이며, 복수의 필드를 정렬기준으로 사용할 수 있다. 정렬가능한 필드는 다음과 같다. (createUtc : 생성일시, recipientCount : 수신자 수, reservationUtc : 예약일시, sendUtc : 발송완료일시, statusCode : 발송상태)  (optional)
	 *	startDateTime 다음과 같은 형태의 요청 시작 일시 (&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), startUtc 값이 우선한다. (optional)
	 *	startUtc 요청 시작 일시 ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  startDateTime 값보다 이 값이 우선 적용된다. (optional)
	 *	templateSid 템플릿 ID (optional)
	 *	title 메일 제목 (optional)
	 * @param body
	 * @return byte[]
	 *	EmailSendListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> mailsRequestsGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/mails/requests";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * Email 수신자별 목록 조회
	 * @param requestId requestId (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param mailId Email ID (각 메일 한 건을 구분하는 ID) (optional)
	 * @param page 결과를 받고 싶은 페이지 index (0..N) (default:0) (optional)
	 * @param recipientAddress 수신자 Email 주소 (optional)
	 * @param sendStatus Email 발송 상태 (R: 발송준비, I: 발송중, S: 발송성공, F: 발송실패, U: 수신거부, C:발송취소, PF: 일부실패) (optional)
	 * @param size 한페이지에 당 레코드 개수 (default:10) (optional)
	 * @param sort 정렬기준 필드 (형식 : property(,asc|desc)) : 기본정렬 방향은 오름차순(asc)이며, 복수의 필드를 정렬기준으로 사용할 수 있다. 정렬가능한 필드는 다음과 같다. (id : mailId, createUtc : 생성일시, statusCode : 발송상태)  (optional)
	 * @param title 메일 제목 (optional)
	 * @return EmailListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<EmailListResponse> mailsRequestsRequestIdMailsGet(String requestId, String X_NCP_LANG, String mailId, Integer page, String recipientAddress, List<String> sendStatus, Integer size, List<String> sort, String title) throws ApiException, SdkException {
		// verify the required parameter 'requestId' is set
		if (requestId == null) {
			throw new SdkException("Missing the required parameter 'requestId' when calling mailsRequestsRequestIdMailsGet");
		}

		// path
		String path = "/mails/requests/{requestId}/mails"
			.replaceAll("\\{" + "requestId" + "\\}", requestId);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();
		if (mailId != null) {
			queryParams.put("mailId", mailId);
		}
		if (page != null) {
			queryParams.put("page", page);
		}
		if (recipientAddress != null) {
			queryParams.put("recipientAddress", recipientAddress);
		}
		if (sendStatus != null) {
			queryParams.put("sendStatus", sendStatus);
		}
		if (size != null) {
			queryParams.put("size", size);
		}
		if (sort != null) {
			queryParams.put("sort", sort);
		}
		if (title != null) {
			queryParams.put("title", title);
		}

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, EmailListResponse.class);
	}

	/**
	 *
	 * Email 수신자별 목록 조회
	 * @param requestId requestId (required)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 *	mailId Email ID (각 메일 한 건을 구분하는 ID) (optional)
	 *	page 결과를 받고 싶은 페이지 index (0..N) (default:0) (optional)
	 *	recipientAddress 수신자 Email 주소 (optional)
	 *	sendStatus Email 발송 상태 (R: 발송준비, I: 발송중, S: 발송성공, F: 발송실패, U: 수신거부, C:발송취소, PF: 일부실패) (optional)
	 *	size 한페이지에 당 레코드 개수 (default:10) (optional)
	 *	sort 정렬기준 필드 (형식 : property(,asc|desc)) : 기본정렬 방향은 오름차순(asc)이며, 복수의 필드를 정렬기준으로 사용할 수 있다. 정렬가능한 필드는 다음과 같다. (id : mailId, createUtc : 생성일시, statusCode : 발송상태)  (optional)
	 *	title 메일 제목 (optional)
	 * @param body
	 * @return byte[]
	 *	EmailListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> mailsRequestsRequestIdMailsGet(String requestId, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'requestId' is set
		if (requestId == null) {
			throw new SdkException("Missing the required parameter 'requestId' when calling mailsRequestsRequestIdMailsGet");
		}

		// path
		String path = "/mails/requests/{requestId}/mails"
			.replaceAll("\\{" + "requestId" + "\\}", requestId);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * Email 발송요청 상태 현황 조회
	 * @param requestId requestId (required)
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @return EmailRequestStatusResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<EmailRequestStatusResponse> mailsRequestsRequestIdStatusGet(String requestId, String X_NCP_LANG) throws ApiException, SdkException {
		// verify the required parameter 'requestId' is set
		if (requestId == null) {
			throw new SdkException("Missing the required parameter 'requestId' when calling mailsRequestsRequestIdStatusGet");
		}

		// path
		String path = "/mails/requests/{requestId}/status"
			.replaceAll("\\{" + "requestId" + "\\}", requestId);

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, EmailRequestStatusResponse.class);
	}

	/**
	 *
	 * Email 발송요청 상태 현황 조회
	 * @param requestId requestId (required)
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 * @param body
	 * @return byte[]
	 *	EmailRequestStatusResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> mailsRequestsRequestIdStatusGet(String requestId, Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;
		// verify the required parameter 'requestId' is set
		if (requestId == null) {
			throw new SdkException("Missing the required parameter 'requestId' when calling mailsRequestsRequestIdStatusGet");
		}

		// path
		String path = "/mails/requests/{requestId}/status"
			.replaceAll("\\{" + "requestId" + "\\}", requestId);

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

	/**
	 *
	 * 수신거부 목록 조회
	 * @param X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param emailAddress Email 주소 (optional)
	 * @param endDateTime 수신거부 등록일 검색 기준 종료 일시, 문자열 포멧(&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), endUtc 값이 우선한다. (optional)
	 * @param endUtc 수신거부 등록일 검색 기준 종료 일시, UTC ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  endDateTime 값보다 이 값이 우선 적용된다. (optional)
	 * @param isRegByManager 관리자 등록 여부 (optional)
	 * @param page 결과를 받고 싶은 페이지 index (0..N) (default:0) (optional)
	 * @param size 한페이지에 당 레코드 개수 (default:10) (optional)
	 * @param sort 정렬기준 필드 (형식 : property(,asc|desc)) : 기본정렬 방향은 오름차순(asc)이며, 복수의 필드를 정렬기준으로 사용할 수 있다. 정렬가능한 필드는 다음과 같다. (createUtc : 등록일시, adminRegYn : 관리자 등록 여부 )  (optional)
	 * @param startDateTime 수신거부 등록일 검색 기준 시작 일시, 문자열 포멧(&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), startUtc 값이 우선한다. (optional)
	 * @param startUtc 수신거부 등록일 검색 기준 시작 일시, UTC( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  startDateTime 값보다 이 값이 우선 적용된다. (optional)
	 * @return UnsubscribeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<UnsubscribeListResponse> unsubscribersGet(String X_NCP_LANG, String emailAddress, String endDateTime, Long endUtc, Boolean isRegByManager, Integer page, Integer size, String sort, String startDateTime, Long startUtc) throws ApiException, SdkException {

		// path
		String path = "/unsubscribers";

		// query params
		Map<String, Object> queryParams = new HashMap<String, Object>();
		if (emailAddress != null) {
			queryParams.put("emailAddress", emailAddress);
		}
		if (endDateTime != null) {
			queryParams.put("endDateTime", endDateTime);
		}
		if (endUtc != null) {
			queryParams.put("endUtc", endUtc);
		}
		if (isRegByManager != null) {
			queryParams.put("isRegByManager", isRegByManager);
		}
		if (page != null) {
			queryParams.put("page", page);
		}
		if (size != null) {
			queryParams.put("size", size);
		}
		if (sort != null) {
			queryParams.put("sort", sort);
		}
		if (startDateTime != null) {
			queryParams.put("startDateTime", startDateTime);
		}
		if (startUtc != null) {
			queryParams.put("startUtc", startUtc);
		}

		// form params
		Map<String, Object> formParams = new HashMap<String, Object>();

		// headers
		Map<String, Object> httpHeaders = new HashMap<String, Object>();
		if (X_NCP_LANG != null) {
			httpHeaders.put("X-NCP-LANG", X_NCP_LANG);
		}

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, false);
		return apiClient.call(apiRequest, UnsubscribeListResponse.class);
	}

	/**
	 *
	 * 수신거부 목록 조회
	 * @param httpHeaders
	 *	X_NCP_LANG 언어 (ko-KR, en-US, zh-CN), default:en-US (optional)
	 * @param queryParams
	 *	emailAddress Email 주소 (optional)
	 *	endDateTime 수신거부 등록일 검색 기준 종료 일시, 문자열 포멧(&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), endUtc 값이 우선한다. (optional)
	 *	endUtc 수신거부 등록일 검색 기준 종료 일시, UTC ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  endDateTime 값보다 이 값이 우선 적용된다. (optional)
	 *	isRegByManager 관리자 등록 여부 (optional)
	 *	page 결과를 받고 싶은 페이지 index (0..N) (default:0) (optional)
	 *	size 한페이지에 당 레코드 개수 (default:10) (optional)
	 *	sort 정렬기준 필드 (형식 : property(,asc|desc)) : 기본정렬 방향은 오름차순(asc)이며, 복수의 필드를 정렬기준으로 사용할 수 있다. 정렬가능한 필드는 다음과 같다. (createUtc : 등록일시, adminRegYn : 관리자 등록 여부 )  (optional)
	 *	startDateTime 수신거부 등록일 검색 기준 시작 일시, 문자열 포멧(&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), startUtc 값이 우선한다. (optional)
	 *	startUtc 수신거부 등록일 검색 기준 시작 일시, UTC( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  startDateTime 값보다 이 값이 우선 적용된다. (optional)
	 * @param body
	 * @return byte[]
	 *	UnsubscribeListResponse
	 * @throws ApiException if fails to make API call
	 * @throws Exception if fails to make API call
	 */
	public ApiResponse<byte[]> unsubscribersGet(Map<String, Object> httpHeaders, Map<String, Object> queryParams, Map<String, Object> formParams, byte[] body) throws ApiException, SdkException {
		httpHeaders = (httpHeaders == null) ? new HashMap() : httpHeaders;
		queryParams = (queryParams == null) ? new HashMap() : queryParams;
		formParams = (queryParams == null) ? new HashMap() : formParams;

		// path
		String path = "/unsubscribers";

		// accept
		final String[] accepts = {
			"application/json"
		};
		String accept = apiClient.selectHeaderAccept(accepts);
		httpHeaders.put("accept", accept);

		// content-type
		final String[] contentTypes = {
			"application/json"
		};
		String contentType = apiClient.selectHeaderContentType(contentTypes);
		httpHeaders.put("content-type", contentType);

		ApiRequest apiRequest = new ApiRequest("GET", path, domain, basePath, queryParams, formParams, httpHeaders, body, false, false);
		return apiClient.call(apiRequest, byte[].class);
	}

}
