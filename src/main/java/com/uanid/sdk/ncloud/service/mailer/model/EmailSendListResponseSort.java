/*
 * api
 * Cloud Outbound Mailer API<br/>https://mail.test-apigw.ntruss.com/api/v1
 *
 * OpenAPI spec version: 2019-06-20T02:51:35Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.uanid.sdk.ncloud.service.mailer.model;

import java.util.Objects;

/**
 * EmailSendListResponseSort
 */
public class EmailSendListResponseSort {
	private String direction = "DESC";

	private String property = null;

	private Boolean ignoreCase = false;

	private String nullHandling = "NATIVE";

	private Boolean ascending = false;

	private Boolean descending = false;

	public EmailSendListResponseSort direction(String direction) {
		this.direction = direction;
		return this;
	}

	 /**
	 * 정렬 방향 (ASC|DESC)
	 * @return direction
	**/
	public String getDirection() {
		return direction;
	}

	public void setDirection(String direction) {
		this.direction = direction;
	}

	public EmailSendListResponseSort property(String property) {
		this.property = property;
		return this;
	}

	 /**
	 * 정렬 기준 필드명
	 * @return property
	**/
	public String getProperty() {
		return property;
	}

	public void setProperty(String property) {
		this.property = property;
	}

	public EmailSendListResponseSort ignoreCase(Boolean ignoreCase) {
		this.ignoreCase = ignoreCase;
		return this;
	}

	 /**
	 * 대소문자 구분하여 정렬할지 여부
	 * @return ignoreCase
	**/
	public Boolean isIgnoreCase() {
		return ignoreCase;
	}

	public void setIgnoreCase(Boolean ignoreCase) {
		this.ignoreCase = ignoreCase;
	}

	public EmailSendListResponseSort nullHandling(String nullHandling) {
		this.nullHandling = nullHandling;
		return this;
	}

	 /**
	 * null 처리 방식 (NATIVE: data 처리로직에 맡김 , NULLS_FIRST : null 값이 앞으로, NULLS_LAST: null 값이 뒤로)
	 * @return nullHandling
	**/
	public String getNullHandling() {
		return nullHandling;
	}

	public void setNullHandling(String nullHandling) {
		this.nullHandling = nullHandling;
	}

	public EmailSendListResponseSort ascending(Boolean ascending) {
		this.ascending = ascending;
		return this;
	}

	 /**
	 * 정렬 방향 Ascending(ASC) 인지 여부
	 * @return ascending
	**/
	public Boolean isAscending() {
		return ascending;
	}

	public void setAscending(Boolean ascending) {
		this.ascending = ascending;
	}

	public EmailSendListResponseSort descending(Boolean descending) {
		this.descending = descending;
		return this;
	}

	 /**
	 * 정렬 방향 Descending(DESC) 인지 여부
	 * @return descending
	**/
	public Boolean isDescending() {
		return descending;
	}

	public void setDescending(Boolean descending) {
		this.descending = descending;
	}


	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		EmailSendListResponseSort emailSendListResponseSort = (EmailSendListResponseSort) o;
		return Objects.equals(this.direction, emailSendListResponseSort.direction) &&
				Objects.equals(this.property, emailSendListResponseSort.property) &&
				Objects.equals(this.ignoreCase, emailSendListResponseSort.ignoreCase) &&
				Objects.equals(this.nullHandling, emailSendListResponseSort.nullHandling) &&
				Objects.equals(this.ascending, emailSendListResponseSort.ascending) &&
				Objects.equals(this.descending, emailSendListResponseSort.descending);
	}

	@Override
	public int hashCode() {
		return Objects.hash(direction, property, ignoreCase, nullHandling, ascending, descending);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class EmailSendListResponseSort {\n");
		
		sb.append("		direction: ").append(toIndentedString(direction)).append("\n");
		sb.append("		property: ").append(toIndentedString(property)).append("\n");
		sb.append("		ignoreCase: ").append(toIndentedString(ignoreCase)).append("\n");
		sb.append("		nullHandling: ").append(toIndentedString(nullHandling)).append("\n");
		sb.append("		ascending: ").append(toIndentedString(ascending)).append("\n");
		sb.append("		descending: ").append(toIndentedString(descending)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

