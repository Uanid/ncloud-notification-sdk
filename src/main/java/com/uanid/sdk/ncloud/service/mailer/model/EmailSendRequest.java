/*
 * api
 * Cloud Outbound Mailer API<br/>https://mail.test-apigw.ntruss.com/api/v1
 *
 * OpenAPI spec version: 2019-06-20T02:51:35Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.uanid.sdk.ncloud.service.mailer.model;

import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

/**
 * EmailSendRequest
 */
public class EmailSendRequest {
	private Boolean useBasicUnsubscribeMsg = true;

	private String unsubscribeMessage = null;

	private Boolean advertising = false;

	private List<String> attachFileIds = null;

	private String body = null;

	private Boolean individual = true;

	private Object parameters = null;

	private List<EmailSendRequestRecipients> recipients = null;

	private String referencesHeader = null;

	private Long reservationUtc = null;

	private String reservationDateTime = null;

	private String senderAddress = null;

	private String senderName = null;

	private Integer templateSid = null;

	private String title = null;

	private Boolean confirmAndSend = false;

	private EmailSendRequestRecipientGroupFilter recipientGroupFilter = null;

	public EmailSendRequest useBasicUnsubscribeMsg(Boolean useBasicUnsubscribeMsg) {
		this.useBasicUnsubscribeMsg = useBasicUnsubscribeMsg;
		return this;
	}

	 /**
	 * 기본 수신거부 문구 사용 여부
	 * @return useBasicUnsubscribeMsg
	**/
	public Boolean isUseBasicUnsubscribeMsg() {
		return useBasicUnsubscribeMsg;
	}

	public void setUseBasicUnsubscribeMsg(Boolean useBasicUnsubscribeMsg) {
		this.useBasicUnsubscribeMsg = useBasicUnsubscribeMsg;
	}

	public EmailSendRequest unsubscribeMessage(String unsubscribeMessage) {
		this.unsubscribeMessage = unsubscribeMessage;
		return this;
	}

	 /**
	 * 수신거부 문구
	 * @return unsubscribeMessage
	**/
	public String getUnsubscribeMessage() {
		return unsubscribeMessage;
	}

	public void setUnsubscribeMessage(String unsubscribeMessage) {
		this.unsubscribeMessage = unsubscribeMessage;
	}

	public EmailSendRequest advertising(Boolean advertising) {
		this.advertising = advertising;
		return this;
	}

	 /**
	 * 광고메일여부 
	 * @return advertising
	**/
	public Boolean isAdvertising() {
		return advertising;
	}

	public void setAdvertising(Boolean advertising) {
		this.advertising = advertising;
	}

	public EmailSendRequest attachFileIds(List<String> attachFileIds) {
		this.attachFileIds = attachFileIds;
		return this;
	}

	public EmailSendRequest addAttachFileIdsItem(String attachFileIdsItem) {
		if (this.attachFileIds == null) {
			this.attachFileIds = new ArrayList<String>();
		}
		this.attachFileIds.add(attachFileIdsItem);
		return this;
	}

	 /**
	 * 첨부파일 ID
	 * @return attachFileIds
	**/
	public List<String> getAttachFileIds() {
		return attachFileIds;
	}

	public void setAttachFileIds(List<String> attachFileIds) {
		this.attachFileIds = attachFileIds;
	}

	public EmailSendRequest body(String body) {
		this.body = body;
		return this;
	}

	 /**
	 * Email본문
	 * @return body
	**/
	public String getBody() {
		return body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	public EmailSendRequest individual(Boolean individual) {
		this.individual = individual;
		return this;
	}

	 /**
	 * 개인발송여부 (개인발송 시 참조인, 숨은참조 무시됨) 
	 * @return individual
	**/
	public Boolean isIndividual() {
		return individual;
	}

	public void setIndividual(Boolean individual) {
		this.individual = individual;
	}

	public EmailSendRequest parameters(Object parameters) {
		this.parameters = parameters;
		return this;
	}

	 /**
	 * 치환 파라미터 (전체 수신자에게 적용), &#39;치환 ID&#39; 를 key로, &#39;치환 ID에 맵핑되는 값&#39; 을 value로 가지는 Map 형태의 Object
	 * @return parameters
	**/
	public Object getParameters() {
		return parameters;
	}

	public void setParameters(Object parameters) {
		this.parameters = parameters;
	}

	public EmailSendRequest recipients(List<EmailSendRequestRecipients> recipients) {
		this.recipients = recipients;
		return this;
	}

	public EmailSendRequest addRecipientsItem(EmailSendRequestRecipients recipientsItem) {
		if (this.recipients == null) {
			this.recipients = new ArrayList<EmailSendRequestRecipients>();
		}
		this.recipients.add(recipientsItem);
		return this;
	}

	 /**
	 * 수신자목록
	 * @return recipients
	**/
	public List<EmailSendRequestRecipients> getRecipients() {
		return recipients;
	}

	public void setRecipients(List<EmailSendRequestRecipients> recipients) {
		this.recipients = recipients;
	}

	public EmailSendRequest referencesHeader(String referencesHeader) {
		this.referencesHeader = referencesHeader;
		return this;
	}

	 /**
	 * 특정 메일을 모아서 보기 위해 네이버 메일에서 지원하는 기능, 해당 필드에 동일한 값을 입력한 메일들을 모아서 볼 수 있다. (다음의 형태가 되어야 함 : &lt;&lt;unique_id@domain.com&gt;&gt; )
	 * @return referencesHeader
	**/
	public String getReferencesHeader() {
		return referencesHeader;
	}

	public void setReferencesHeader(String referencesHeader) {
		this.referencesHeader = referencesHeader;
	}

	public EmailSendRequest reservationUtc(Long reservationUtc) {
		this.reservationUtc = reservationUtc;
		return this;
	}

	 /**
	 * 예약 발송 일시 ( 1970년 1월 1일 00:00:00 협정 세계시(UTC) 부터의 경과 시간을  1/1000초로 환산한 정수 ),  reservationDateTime 값보다 이 값이 우선 적용된다.
	 * @return reservationUtc
	**/
	public Long getReservationUtc() {
		return reservationUtc;
	}

	public void setReservationUtc(Long reservationUtc) {
		this.reservationUtc = reservationUtc;
	}

	public EmailSendRequest reservationDateTime(String reservationDateTime) {
		this.reservationDateTime = reservationDateTime;
		return this;
	}

	 /**
	 * 다음과 같은 형태의 예약 발송 일시 (&#39;yyyy-MM-dd HH:mm&#39; UTC+09:00), reservationUtc 값이 우선한다.
	 * @return reservationDateTime
	**/
	public String getReservationDateTime() {
		return reservationDateTime;
	}

	public void setReservationDateTime(String reservationDateTime) {
		this.reservationDateTime = reservationDateTime;
	}

	public EmailSendRequest senderAddress(String senderAddress) {
		this.senderAddress = senderAddress;
		return this;
	}

	 /**
	 * 발송자 Email 주소
	 * @return senderAddress
	**/
	public String getSenderAddress() {
		return senderAddress;
	}

	public void setSenderAddress(String senderAddress) {
		this.senderAddress = senderAddress;
	}

	public EmailSendRequest senderName(String senderName) {
		this.senderName = senderName;
		return this;
	}

	 /**
	 * 발송자 이름
	 * @return senderName
	**/
	public String getSenderName() {
		return senderName;
	}

	public void setSenderName(String senderName) {
		this.senderName = senderName;
	}

	public EmailSendRequest templateSid(Integer templateSid) {
		this.templateSid = templateSid;
		return this;
	}

	 /**
	 * 템플릿 ID
	 * @return templateSid
	**/
	public Integer getTemplateSid() {
		return templateSid;
	}

	public void setTemplateSid(Integer templateSid) {
		this.templateSid = templateSid;
	}

	public EmailSendRequest title(String title) {
		this.title = title;
		return this;
	}

	 /**
	 * Mail 제목
	 * @return title
	**/
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public EmailSendRequest confirmAndSend(Boolean confirmAndSend) {
		this.confirmAndSend = confirmAndSend;
		return this;
	}

	 /**
	 * 확인 후 발송 여부
	 * @return confirmAndSend
	**/
	public Boolean isConfirmAndSend() {
		return confirmAndSend;
	}

	public void setConfirmAndSend(Boolean confirmAndSend) {
		this.confirmAndSend = confirmAndSend;
	}

	public EmailSendRequest recipientGroupFilter(EmailSendRequestRecipientGroupFilter recipientGroupFilter) {
		this.recipientGroupFilter = recipientGroupFilter;
		return this;
	}

	 /**
	 * Get recipientGroupFilter
	 * @return recipientGroupFilter
	**/
	public EmailSendRequestRecipientGroupFilter getRecipientGroupFilter() {
		return recipientGroupFilter;
	}

	public void setRecipientGroupFilter(EmailSendRequestRecipientGroupFilter recipientGroupFilter) {
		this.recipientGroupFilter = recipientGroupFilter;
	}


	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		EmailSendRequest emailSendRequest = (EmailSendRequest) o;
		return Objects.equals(this.useBasicUnsubscribeMsg, emailSendRequest.useBasicUnsubscribeMsg) &&
				Objects.equals(this.unsubscribeMessage, emailSendRequest.unsubscribeMessage) &&
				Objects.equals(this.advertising, emailSendRequest.advertising) &&
				Objects.equals(this.attachFileIds, emailSendRequest.attachFileIds) &&
				Objects.equals(this.body, emailSendRequest.body) &&
				Objects.equals(this.individual, emailSendRequest.individual) &&
				Objects.equals(this.parameters, emailSendRequest.parameters) &&
				Objects.equals(this.recipients, emailSendRequest.recipients) &&
				Objects.equals(this.referencesHeader, emailSendRequest.referencesHeader) &&
				Objects.equals(this.reservationUtc, emailSendRequest.reservationUtc) &&
				Objects.equals(this.reservationDateTime, emailSendRequest.reservationDateTime) &&
				Objects.equals(this.senderAddress, emailSendRequest.senderAddress) &&
				Objects.equals(this.senderName, emailSendRequest.senderName) &&
				Objects.equals(this.templateSid, emailSendRequest.templateSid) &&
				Objects.equals(this.title, emailSendRequest.title) &&
				Objects.equals(this.confirmAndSend, emailSendRequest.confirmAndSend) &&
				Objects.equals(this.recipientGroupFilter, emailSendRequest.recipientGroupFilter);
	}

	@Override
	public int hashCode() {
		return Objects.hash(useBasicUnsubscribeMsg, unsubscribeMessage, advertising, attachFileIds, body, individual, parameters, recipients, referencesHeader, reservationUtc, reservationDateTime, senderAddress, senderName, templateSid, title, confirmAndSend, recipientGroupFilter);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class EmailSendRequest {\n");
		
		sb.append("		useBasicUnsubscribeMsg: ").append(toIndentedString(useBasicUnsubscribeMsg)).append("\n");
		sb.append("		unsubscribeMessage: ").append(toIndentedString(unsubscribeMessage)).append("\n");
		sb.append("		advertising: ").append(toIndentedString(advertising)).append("\n");
		sb.append("		attachFileIds: ").append(toIndentedString(attachFileIds)).append("\n");
		sb.append("		body: ").append(toIndentedString(body)).append("\n");
		sb.append("		individual: ").append(toIndentedString(individual)).append("\n");
		sb.append("		parameters: ").append(toIndentedString(parameters)).append("\n");
		sb.append("		recipients: ").append(toIndentedString(recipients)).append("\n");
		sb.append("		referencesHeader: ").append(toIndentedString(referencesHeader)).append("\n");
		sb.append("		reservationUtc: ").append(toIndentedString(reservationUtc)).append("\n");
		sb.append("		reservationDateTime: ").append(toIndentedString(reservationDateTime)).append("\n");
		sb.append("		senderAddress: ").append(toIndentedString(senderAddress)).append("\n");
		sb.append("		senderName: ").append(toIndentedString(senderName)).append("\n");
		sb.append("		templateSid: ").append(toIndentedString(templateSid)).append("\n");
		sb.append("		title: ").append(toIndentedString(title)).append("\n");
		sb.append("		confirmAndSend: ").append(toIndentedString(confirmAndSend)).append("\n");
		sb.append("		recipientGroupFilter: ").append(toIndentedString(recipientGroupFilter)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

