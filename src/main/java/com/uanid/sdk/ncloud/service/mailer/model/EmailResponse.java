/*
 * api
 * Cloud Outbound Mailer API<br/>https://mail.test-apigw.ntruss.com/api/v1
 *
 * OpenAPI spec version: 2019-06-20T02:51:35Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.uanid.sdk.ncloud.service.mailer.model;

import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

/**
 * EmailResponse
 */
public class EmailResponse {
	private String requestId = null;

	private String requesterIp = null;

	private NesDateTime requestDate = null;

	private String mailId = null;

	private String title = null;

	private String body = null;

	private Integer templateSid = null;

	private String templateName = null;

	private EmailResponseEmailStatus emailStatus = null;

	private String senderAddress = null;

	private String senderName = null;

	private NesDateTime sendDate = null;

	private NesDateTime reservationDate = null;

	private Boolean advertising = null;

	private String referencesHeader = null;

	private List<EmailResponseAttachFiles> attachFiles = null;

	private List<EmailResponseRecipients> recipients = null;

	public EmailResponse requestId(String requestId) {
		this.requestId = requestId;
		return this;
	}

	 /**
	 * Email 발송 요청 ID (각 요청을 구분하는 ID, 한번에 여러건에 메일 발송을 요청할 경우 requestId가 여러개의 mailId를 포함할 수 있다.
	 * @return requestId
	**/
	public String getRequestId() {
		return requestId;
	}

	public void setRequestId(String requestId) {
		this.requestId = requestId;
	}

	public EmailResponse requesterIp(String requesterIp) {
		this.requesterIp = requesterIp;
		return this;
	}

	 /**
	 * Email 발송 요청자 IP
	 * @return requesterIp
	**/
	public String getRequesterIp() {
		return requesterIp;
	}

	public void setRequesterIp(String requesterIp) {
		this.requesterIp = requesterIp;
	}

	public EmailResponse requestDate(NesDateTime requestDate) {
		this.requestDate = requestDate;
		return this;
	}

	 /**
	 * 요청일시
	 * @return requestDate
	**/
	public NesDateTime getRequestDate() {
		return requestDate;
	}

	public void setRequestDate(NesDateTime requestDate) {
		this.requestDate = requestDate;
	}

	public EmailResponse mailId(String mailId) {
		this.mailId = mailId;
		return this;
	}

	 /**
	 * Email ID (각 메일 한 건을 구분하는 ID)
	 * @return mailId
	**/
	public String getMailId() {
		return mailId;
	}

	public void setMailId(String mailId) {
		this.mailId = mailId;
	}

	public EmailResponse title(String title) {
		this.title = title;
		return this;
	}

	 /**
	 * 메일 제목
	 * @return title
	**/
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public EmailResponse body(String body) {
		this.body = body;
		return this;
	}

	 /**
	 * 메일 내용
	 * @return body
	**/
	public String getBody() {
		return body;
	}

	public void setBody(String body) {
		this.body = body;
	}

	public EmailResponse templateSid(Integer templateSid) {
		this.templateSid = templateSid;
		return this;
	}

	 /**
	 * 템플릿 ID
	 * @return templateSid
	**/
	public Integer getTemplateSid() {
		return templateSid;
	}

	public void setTemplateSid(Integer templateSid) {
		this.templateSid = templateSid;
	}

	public EmailResponse templateName(String templateName) {
		this.templateName = templateName;
		return this;
	}

	 /**
	 * 템플릿 제목
	 * @return templateName
	**/
	public String getTemplateName() {
		return templateName;
	}

	public void setTemplateName(String templateName) {
		this.templateName = templateName;
	}

	public EmailResponse emailStatus(EmailResponseEmailStatus emailStatus) {
		this.emailStatus = emailStatus;
		return this;
	}

	 /**
	 * Get emailStatus
	 * @return emailStatus
	**/
	public EmailResponseEmailStatus getEmailStatus() {
		return emailStatus;
	}

	public void setEmailStatus(EmailResponseEmailStatus emailStatus) {
		this.emailStatus = emailStatus;
	}

	public EmailResponse senderAddress(String senderAddress) {
		this.senderAddress = senderAddress;
		return this;
	}

	 /**
	 * 발송자 Email 주소
	 * @return senderAddress
	**/
	public String getSenderAddress() {
		return senderAddress;
	}

	public void setSenderAddress(String senderAddress) {
		this.senderAddress = senderAddress;
	}

	public EmailResponse senderName(String senderName) {
		this.senderName = senderName;
		return this;
	}

	 /**
	 * 발송자 이름
	 * @return senderName
	**/
	public String getSenderName() {
		return senderName;
	}

	public void setSenderName(String senderName) {
		this.senderName = senderName;
	}

	public EmailResponse sendDate(NesDateTime sendDate) {
		this.sendDate = sendDate;
		return this;
	}

	 /**
	 * 발송 일시
	 * @return sendDate
	**/
	public NesDateTime getSendDate() {
		return sendDate;
	}

	public void setSendDate(NesDateTime sendDate) {
		this.sendDate = sendDate;
	}

	public EmailResponse reservationDate(NesDateTime reservationDate) {
		this.reservationDate = reservationDate;
		return this;
	}

	 /**
	 * 예약 발송 일시
	 * @return reservationDate
	**/
	public NesDateTime getReservationDate() {
		return reservationDate;
	}

	public void setReservationDate(NesDateTime reservationDate) {
		this.reservationDate = reservationDate;
	}

	public EmailResponse advertising(Boolean advertising) {
		this.advertising = advertising;
		return this;
	}

	 /**
	 * 광고메일 여부
	 * @return advertising
	**/
	public Boolean isAdvertising() {
		return advertising;
	}

	public void setAdvertising(Boolean advertising) {
		this.advertising = advertising;
	}

	public EmailResponse referencesHeader(String referencesHeader) {
		this.referencesHeader = referencesHeader;
		return this;
	}

	 /**
	 * References 헤더 (다음의 형태가 되어야 함 &lt;unique_id@domain.com&gt;), 네이버 메일에서는 References 헤더에 따라 메일을 모아 볼 수 있음. 특정 메일을 모아서 보기 위해서는 Unique 한 값이 입력 되어야만 함. 값이 중복되는 경우 같은 메일 쓰레드로 판단하여 메일을 묶어서 노출 됨.하나의 값만 입력해도 가능(References 헤더의 최상단 값만으로만 판단).
	 * @return referencesHeader
	**/
	public String getReferencesHeader() {
		return referencesHeader;
	}

	public void setReferencesHeader(String referencesHeader) {
		this.referencesHeader = referencesHeader;
	}

	public EmailResponse attachFiles(List<EmailResponseAttachFiles> attachFiles) {
		this.attachFiles = attachFiles;
		return this;
	}

	public EmailResponse addAttachFilesItem(EmailResponseAttachFiles attachFilesItem) {
		if (this.attachFiles == null) {
			this.attachFiles = new ArrayList<EmailResponseAttachFiles>();
		}
		this.attachFiles.add(attachFilesItem);
		return this;
	}

	 /**
	 *  첨부파일
	 * @return attachFiles
	**/
	public List<EmailResponseAttachFiles> getAttachFiles() {
		return attachFiles;
	}

	public void setAttachFiles(List<EmailResponseAttachFiles> attachFiles) {
		this.attachFiles = attachFiles;
	}

	public EmailResponse recipients(List<EmailResponseRecipients> recipients) {
		this.recipients = recipients;
		return this;
	}

	public EmailResponse addRecipientsItem(EmailResponseRecipients recipientsItem) {
		if (this.recipients == null) {
			this.recipients = new ArrayList<EmailResponseRecipients>();
		}
		this.recipients.add(recipientsItem);
		return this;
	}

	 /**
	 *  수신자 목록
	 * @return recipients
	**/
	public List<EmailResponseRecipients> getRecipients() {
		return recipients;
	}

	public void setRecipients(List<EmailResponseRecipients> recipients) {
		this.recipients = recipients;
	}


	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		EmailResponse emailResponse = (EmailResponse) o;
		return Objects.equals(this.requestId, emailResponse.requestId) &&
				Objects.equals(this.requesterIp, emailResponse.requesterIp) &&
				Objects.equals(this.requestDate, emailResponse.requestDate) &&
				Objects.equals(this.mailId, emailResponse.mailId) &&
				Objects.equals(this.title, emailResponse.title) &&
				Objects.equals(this.body, emailResponse.body) &&
				Objects.equals(this.templateSid, emailResponse.templateSid) &&
				Objects.equals(this.templateName, emailResponse.templateName) &&
				Objects.equals(this.emailStatus, emailResponse.emailStatus) &&
				Objects.equals(this.senderAddress, emailResponse.senderAddress) &&
				Objects.equals(this.senderName, emailResponse.senderName) &&
				Objects.equals(this.sendDate, emailResponse.sendDate) &&
				Objects.equals(this.reservationDate, emailResponse.reservationDate) &&
				Objects.equals(this.advertising, emailResponse.advertising) &&
				Objects.equals(this.referencesHeader, emailResponse.referencesHeader) &&
				Objects.equals(this.attachFiles, emailResponse.attachFiles) &&
				Objects.equals(this.recipients, emailResponse.recipients);
	}

	@Override
	public int hashCode() {
		return Objects.hash(requestId, requesterIp, requestDate, mailId, title, body, templateSid, templateName, emailStatus, senderAddress, senderName, sendDate, reservationDate, advertising, referencesHeader, attachFiles, recipients);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class EmailResponse {\n");
		
		sb.append("		requestId: ").append(toIndentedString(requestId)).append("\n");
		sb.append("		requesterIp: ").append(toIndentedString(requesterIp)).append("\n");
		sb.append("		requestDate: ").append(toIndentedString(requestDate)).append("\n");
		sb.append("		mailId: ").append(toIndentedString(mailId)).append("\n");
		sb.append("		title: ").append(toIndentedString(title)).append("\n");
		sb.append("		body: ").append(toIndentedString(body)).append("\n");
		sb.append("		templateSid: ").append(toIndentedString(templateSid)).append("\n");
		sb.append("		templateName: ").append(toIndentedString(templateName)).append("\n");
		sb.append("		emailStatus: ").append(toIndentedString(emailStatus)).append("\n");
		sb.append("		senderAddress: ").append(toIndentedString(senderAddress)).append("\n");
		sb.append("		senderName: ").append(toIndentedString(senderName)).append("\n");
		sb.append("		sendDate: ").append(toIndentedString(sendDate)).append("\n");
		sb.append("		reservationDate: ").append(toIndentedString(reservationDate)).append("\n");
		sb.append("		advertising: ").append(toIndentedString(advertising)).append("\n");
		sb.append("		referencesHeader: ").append(toIndentedString(referencesHeader)).append("\n");
		sb.append("		attachFiles: ").append(toIndentedString(attachFiles)).append("\n");
		sb.append("		recipients: ").append(toIndentedString(recipients)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

