/*
 * api
 * Cloud Outbound Mailer API<br/>https://mail.test-apigw.ntruss.com/api/v1
 *
 * OpenAPI spec version: 2019-06-20T02:51:35Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nbp.ncp.nes.model;

import java.util.Objects;
import com.nbp.ncp.nes.model.EmailSendListResponseEmailStatus;
import com.nbp.ncp.nes.model.NesDateTime;

/**
 * EmailSendListResponseContent
 */
public class EmailSendListResponseContent {
	private String requestId = null;

	private NesDateTime requestDate = null;

	private Integer templateSid = null;

	private String templateName = null;

	private EmailSendListResponseEmailStatus emailStatus = null;

	private String senderAddress = null;

	private String senderName = null;

	private String dispatchType = null;

	private NesDateTime sendDate = null;

	private NesDateTime reservationDate = null;

	private Integer requestCount = null;

	private Integer recipientCount = null;

	public EmailSendListResponseContent requestId(String requestId) {
		this.requestId = requestId;
		return this;
	}

	 /**
	 * Email 발송 요청 ID (각 요청을 구분하는 ID, 한번에 여러건에 메일 발송을 요청할 경우 requestId가 여러개의 mailId를 포함할 수 있다.
	 * @return requestId
	**/
	public String getRequestId() {
		return requestId;
	}

	public void setRequestId(String requestId) {
		this.requestId = requestId;
	}

	public EmailSendListResponseContent requestDate(NesDateTime requestDate) {
		this.requestDate = requestDate;
		return this;
	}

	 /**
	 * 요청일시
	 * @return requestDate
	**/
	public NesDateTime getRequestDate() {
		return requestDate;
	}

	public void setRequestDate(NesDateTime requestDate) {
		this.requestDate = requestDate;
	}

	public EmailSendListResponseContent templateSid(Integer templateSid) {
		this.templateSid = templateSid;
		return this;
	}

	 /**
	 * 템플릿 ID
	 * @return templateSid
	**/
	public Integer getTemplateSid() {
		return templateSid;
	}

	public void setTemplateSid(Integer templateSid) {
		this.templateSid = templateSid;
	}

	public EmailSendListResponseContent templateName(String templateName) {
		this.templateName = templateName;
		return this;
	}

	 /**
	 * 템플릿 제목
	 * @return templateName
	**/
	public String getTemplateName() {
		return templateName;
	}

	public void setTemplateName(String templateName) {
		this.templateName = templateName;
	}

	public EmailSendListResponseContent emailStatus(EmailSendListResponseEmailStatus emailStatus) {
		this.emailStatus = emailStatus;
		return this;
	}

	 /**
	 * Get emailStatus
	 * @return emailStatus
	**/
	public EmailSendListResponseEmailStatus getEmailStatus() {
		return emailStatus;
	}

	public void setEmailStatus(EmailSendListResponseEmailStatus emailStatus) {
		this.emailStatus = emailStatus;
	}

	public EmailSendListResponseContent senderAddress(String senderAddress) {
		this.senderAddress = senderAddress;
		return this;
	}

	 /**
	 * 발송자 Email 주소
	 * @return senderAddress
	**/
	public String getSenderAddress() {
		return senderAddress;
	}

	public void setSenderAddress(String senderAddress) {
		this.senderAddress = senderAddress;
	}

	public EmailSendListResponseContent senderName(String senderName) {
		this.senderName = senderName;
		return this;
	}

	 /**
	 * 발송자 이름
	 * @return senderName
	**/
	public String getSenderName() {
		return senderName;
	}

	public void setSenderName(String senderName) {
		this.senderName = senderName;
	}

	public EmailSendListResponseContent dispatchType(String dispatchType) {
		this.dispatchType = dispatchType;
		return this;
	}

	 /**
	 * Email 발송요청 도구 (CONSOLE : NCP Console 화면을 통한 요청, API : API 호출을 통한 요청)
	 * @return dispatchType
	**/
	public String getDispatchType() {
		return dispatchType;
	}

	public void setDispatchType(String dispatchType) {
		this.dispatchType = dispatchType;
	}

	public EmailSendListResponseContent sendDate(NesDateTime sendDate) {
		this.sendDate = sendDate;
		return this;
	}

	 /**
	 * 발송완료 일시
	 * @return sendDate
	**/
	public NesDateTime getSendDate() {
		return sendDate;
	}

	public void setSendDate(NesDateTime sendDate) {
		this.sendDate = sendDate;
	}

	public EmailSendListResponseContent reservationDate(NesDateTime reservationDate) {
		this.reservationDate = reservationDate;
		return this;
	}

	 /**
	 * 예약 발송 일시
	 * @return reservationDate
	**/
	public NesDateTime getReservationDate() {
		return reservationDate;
	}

	public void setReservationDate(NesDateTime reservationDate) {
		this.reservationDate = reservationDate;
	}

	public EmailSendListResponseContent requestCount(Integer requestCount) {
		this.requestCount = requestCount;
		return this;
	}

	 /**
	 * 발송 메일 건수 (개별 발송일 경우 recipientCount 와 동일)
	 * @return requestCount
	**/
	public Integer getRequestCount() {
		return requestCount;
	}

	public void setRequestCount(Integer requestCount) {
		this.requestCount = requestCount;
	}

	public EmailSendListResponseContent recipientCount(Integer recipientCount) {
		this.recipientCount = recipientCount;
		return this;
	}

	 /**
	 * 발송 수신자/참조/숨은참조자 수 총합(개별 발송일 경우 requestCount 와 동일하지만 일반발송의 경우 requestCount 보다 같거나 크다)
	 * @return recipientCount
	**/
	public Integer getRecipientCount() {
		return recipientCount;
	}

	public void setRecipientCount(Integer recipientCount) {
		this.recipientCount = recipientCount;
	}


	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		EmailSendListResponseContent emailSendListResponseContent = (EmailSendListResponseContent) o;
		return Objects.equals(this.requestId, emailSendListResponseContent.requestId) &&
				Objects.equals(this.requestDate, emailSendListResponseContent.requestDate) &&
				Objects.equals(this.templateSid, emailSendListResponseContent.templateSid) &&
				Objects.equals(this.templateName, emailSendListResponseContent.templateName) &&
				Objects.equals(this.emailStatus, emailSendListResponseContent.emailStatus) &&
				Objects.equals(this.senderAddress, emailSendListResponseContent.senderAddress) &&
				Objects.equals(this.senderName, emailSendListResponseContent.senderName) &&
				Objects.equals(this.dispatchType, emailSendListResponseContent.dispatchType) &&
				Objects.equals(this.sendDate, emailSendListResponseContent.sendDate) &&
				Objects.equals(this.reservationDate, emailSendListResponseContent.reservationDate) &&
				Objects.equals(this.requestCount, emailSendListResponseContent.requestCount) &&
				Objects.equals(this.recipientCount, emailSendListResponseContent.recipientCount);
	}

	@Override
	public int hashCode() {
		return Objects.hash(requestId, requestDate, templateSid, templateName, emailStatus, senderAddress, senderName, dispatchType, sendDate, reservationDate, requestCount, recipientCount);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class EmailSendListResponseContent {\n");
		
		sb.append("		requestId: ").append(toIndentedString(requestId)).append("\n");
		sb.append("		requestDate: ").append(toIndentedString(requestDate)).append("\n");
		sb.append("		templateSid: ").append(toIndentedString(templateSid)).append("\n");
		sb.append("		templateName: ").append(toIndentedString(templateName)).append("\n");
		sb.append("		emailStatus: ").append(toIndentedString(emailStatus)).append("\n");
		sb.append("		senderAddress: ").append(toIndentedString(senderAddress)).append("\n");
		sb.append("		senderName: ").append(toIndentedString(senderName)).append("\n");
		sb.append("		dispatchType: ").append(toIndentedString(dispatchType)).append("\n");
		sb.append("		sendDate: ").append(toIndentedString(sendDate)).append("\n");
		sb.append("		reservationDate: ").append(toIndentedString(reservationDate)).append("\n");
		sb.append("		requestCount: ").append(toIndentedString(requestCount)).append("\n");
		sb.append("		recipientCount: ").append(toIndentedString(recipientCount)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

