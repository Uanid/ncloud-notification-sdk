/*
 * api
 * Cloud Outbound Mailer API<br/>https://mail.test-apigw.ntruss.com/api/v1
 *
 * OpenAPI spec version: 2019-06-20T02:51:35Z
 *
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.nbp.ncp.nes.model;

import java.util.Objects;
import com.nbp.ncp.nes.model.EmailRequestStatusResponseCountsByStatus;
import com.nbp.ncp.nes.model.NesDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * EmailRequestStatusResponse
 */
public class EmailRequestStatusResponse {
	private String requestId = null;

	private Boolean readyCompleted = false;

	private Boolean allSentSuccess = false;

	private Integer requestCount = null;

	private Integer sentCount = null;

	private Integer finishCount = null;

	private Integer readyCount = null;

	private NesDateTime reservationDate = null;

	private List<EmailRequestStatusResponseCountsByStatus> countsByStatus = null;

	public EmailRequestStatusResponse requestId(String requestId) {
		this.requestId = requestId;
		return this;
	}

	 /**
	 * 요청 ID
	 * @return requestId
	**/
	public String getRequestId() {
		return requestId;
	}

	public void setRequestId(String requestId) {
		this.requestId = requestId;
	}

	public EmailRequestStatusResponse readyCompleted(Boolean readyCompleted) {
		this.readyCompleted = readyCompleted;
		return this;
	}

	 /**
	 * 발송 준비 완료 여부 - 발송요청한 건수가 모두 DB에 입력되어 발송할 준비가 되어 있는지 여부 (발송 완료 되었어도 true) 
	 * @return readyCompleted
	**/
	public Boolean isReadyCompleted() {
		return readyCompleted;
	}

	public void setReadyCompleted(Boolean readyCompleted) {
		this.readyCompleted = readyCompleted;
	}

	public EmailRequestStatusResponse allSentSuccess(Boolean allSentSuccess) {
		this.allSentSuccess = allSentSuccess;
		return this;
	}

	 /**
	 * 요청된 모든 메일이 발송에 성공했는지 여부
	 * @return allSentSuccess
	**/
	public Boolean isAllSentSuccess() {
		return allSentSuccess;
	}

	public void setAllSentSuccess(Boolean allSentSuccess) {
		this.allSentSuccess = allSentSuccess;
	}

	public EmailRequestStatusResponse requestCount(Integer requestCount) {
		this.requestCount = requestCount;
		return this;
	}

	 /**
	 * 발송 요청 건수
	 * @return requestCount
	**/
	public Integer getRequestCount() {
		return requestCount;
	}

	public void setRequestCount(Integer requestCount) {
		this.requestCount = requestCount;
	}

	public EmailRequestStatusResponse sentCount(Integer sentCount) {
		this.sentCount = sentCount;
		return this;
	}

	 /**
	 * 발송 완료된 건수 (발송 성공)
	 * @return sentCount
	**/
	public Integer getSentCount() {
		return sentCount;
	}

	public void setSentCount(Integer sentCount) {
		this.sentCount = sentCount;
	}

	public EmailRequestStatusResponse finishCount(Integer finishCount) {
		this.finishCount = finishCount;
		return this;
	}

	 /**
	 * 처리 완료된 건수 (발송 성공 + 실패 +수신거부 + 취소 )
	 * @return finishCount
	**/
	public Integer getFinishCount() {
		return finishCount;
	}

	public void setFinishCount(Integer finishCount) {
		this.finishCount = finishCount;
	}

	public EmailRequestStatusResponse readyCount(Integer readyCount) {
		this.readyCount = readyCount;
		return this;
	}

	 /**
	 * 준비 완료 또는 발송 완료된  건수 (발송하기 위해 DB 에 입력된 건수)
	 * @return readyCount
	**/
	public Integer getReadyCount() {
		return readyCount;
	}

	public void setReadyCount(Integer readyCount) {
		this.readyCount = readyCount;
	}

	public EmailRequestStatusResponse reservationDate(NesDateTime reservationDate) {
		this.reservationDate = reservationDate;
		return this;
	}

	 /**
	 * 예약일시
	 * @return reservationDate
	**/
	public NesDateTime getReservationDate() {
		return reservationDate;
	}

	public void setReservationDate(NesDateTime reservationDate) {
		this.reservationDate = reservationDate;
	}

	public EmailRequestStatusResponse countsByStatus(List<EmailRequestStatusResponseCountsByStatus> countsByStatus) {
		this.countsByStatus = countsByStatus;
		return this;
	}

	public EmailRequestStatusResponse addCountsByStatusItem(EmailRequestStatusResponseCountsByStatus countsByStatusItem) {
		if (this.countsByStatus == null) {
			this.countsByStatus = new ArrayList<EmailRequestStatusResponseCountsByStatus>();
		}
		this.countsByStatus.add(countsByStatusItem);
		return this;
	}

	 /**
	 * 상태별 메일 개수
	 * @return countsByStatus
	**/
	public List<EmailRequestStatusResponseCountsByStatus> getCountsByStatus() {
		return countsByStatus;
	}

	public void setCountsByStatus(List<EmailRequestStatusResponseCountsByStatus> countsByStatus) {
		this.countsByStatus = countsByStatus;
	}


	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		EmailRequestStatusResponse emailRequestStatusResponse = (EmailRequestStatusResponse) o;
		return Objects.equals(this.requestId, emailRequestStatusResponse.requestId) &&
				Objects.equals(this.readyCompleted, emailRequestStatusResponse.readyCompleted) &&
				Objects.equals(this.allSentSuccess, emailRequestStatusResponse.allSentSuccess) &&
				Objects.equals(this.requestCount, emailRequestStatusResponse.requestCount) &&
				Objects.equals(this.sentCount, emailRequestStatusResponse.sentCount) &&
				Objects.equals(this.finishCount, emailRequestStatusResponse.finishCount) &&
				Objects.equals(this.readyCount, emailRequestStatusResponse.readyCount) &&
				Objects.equals(this.reservationDate, emailRequestStatusResponse.reservationDate) &&
				Objects.equals(this.countsByStatus, emailRequestStatusResponse.countsByStatus);
	}

	@Override
	public int hashCode() {
		return Objects.hash(requestId, readyCompleted, allSentSuccess, requestCount, sentCount, finishCount, readyCount, reservationDate, countsByStatus);
	}


	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class EmailRequestStatusResponse {\n");
		
		sb.append("		requestId: ").append(toIndentedString(requestId)).append("\n");
		sb.append("		readyCompleted: ").append(toIndentedString(readyCompleted)).append("\n");
		sb.append("		allSentSuccess: ").append(toIndentedString(allSentSuccess)).append("\n");
		sb.append("		requestCount: ").append(toIndentedString(requestCount)).append("\n");
		sb.append("		sentCount: ").append(toIndentedString(sentCount)).append("\n");
		sb.append("		finishCount: ").append(toIndentedString(finishCount)).append("\n");
		sb.append("		readyCount: ").append(toIndentedString(readyCount)).append("\n");
		sb.append("		reservationDate: ").append(toIndentedString(reservationDate)).append("\n");
		sb.append("		countsByStatus: ").append(toIndentedString(countsByStatus)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n		");
	}

}

